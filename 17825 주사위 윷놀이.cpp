#include <iostream>
#include <algorithm>
using namespace std;

int map[33][6] = {
	{ 0,1,2,3,4,5 },
	{ 2,2,3,4,5,6 },
	{ 4,3,4,5,6,7 },
	{ 6,4,5,6,7,8 },
	{ 8,5,6,7,8,9 },
	{ 10,22,23,24,30,31 },
	{ 12,7,8,9,10,11 },
	{ 14,8,9,10,11,12 },
	{ 16,9,10,11,12,13 },
	{ 18,10,11,12,13,14 },
	{ 20,25,26,30,31,32 },
	{ 22,12,13,14,15,16 },
	{ 24,13,14,15,16,17 },
	{ 26,14,15,16,17,18 },
	{ 28,15,16,17,18,19 },
	{ 30,27,28,29,30,31 },
	{ 32,17,18,19,20,21 },
	{ 34,18,19,20,21,21 },
	{ 36,19,20,21,21,21 },
	{ 38,20,21,21,21,21 },
	{ 40,21,21,21,21,21 },
	{ 0,21,21,21,21,21 },	// 도착.
	{ 13,23,24,30,31,32 },
	{ 16,24,30,31,32,20 },
	{ 19,30,31,32,20,21 },
	{ 22,26,30,31,32,20 },
	{ 24,30,31,32,20,21 },
	{ 28,28,29,30,31,32 },
	{ 27,29,30,31,32,20 },
	{ 26,30,31,32,20,21 },
	{ 25,31,32,20,21,21 },
	{ 30,32,20,21,21,21 },
	{ 35,20,21,21,21,21 }
};

int dice[10];
int ans;
int horse[4];

bool isThereHorse(int a) {
	if (a == 21)
		return true;
	for (int i = 0; i < 4; i++) {
		if (horse[i] == a) return false;
	}
	return true;
}

void dfs(int cnt, int score) {
	if (cnt == 10) {
		ans = max(ans, score);
		return;
	}
	for (int i = 0; i < 4; i++) {
		int tmp = horse[i];
		// 말이 이미 도착지점이거나 가려는 곳에 말이 이미 있다면.
		if (horse[i] == 21) continue;
		if (isThereHorse(map[horse[i]][dice[cnt]])) {
			horse[i] = map[horse[i]][dice[cnt]];
			dfs(cnt + 1, score + map[horse[i]][0]);
			horse[i] = tmp;
		}
	}
}

int main() {
	for (int i = 0; i < 10; i++)
		cin >> dice[i];
	dfs(0, 0);
	cout << ans << '\n';
	return 0;
}